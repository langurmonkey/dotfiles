# interpreter for shell commands (needs to be POSIX compatible)
set shell sh

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# show icons
set icons

# show hidden
set hidden

# leave some space at the top and the bottom of the screen
set scrolloff 10

# image preview
set previewer ~/.config/lf/preview
set cleaner ~/.config/lf/cleaner
# define a custom 'open' command
cmd open $$OPENER $fx
cmd open-choose $OPENER_CHOOSE="true" $OPENER $fx
# dedicated keys for file opener actions
map o open
map O open-choose
#map o &mimeopen $f
#map O $mimeopen --ask $f

# use enter for shell commands
map S shell

# execute current file (must be executable)
map x $$f
map X !$f

# go places
map ~ :cd ~
map gh :cd ~
map gc :cd ~/.dotfiles
map gp :cd ~/Pictures
map gdw :cd ~/Downloads
map gdo :cd ~/Documents
map gw :cd ~/Pictures/Wallpapers
map gs :cd ~/Sync

# create directory
map a push %mkdir<space>

# file information
map . push %file<space>-b<space>$f<enter>

# sets the current image file as wallpaper
cmd setbg ${{
    CURRENT_WALLPAPER="$HOME/Pictures/current-wallpaper"
    rm -f "$CURRENT_WALLPAPER"
    ln -s "$f" "$CURRENT_WALLPAPER"
    if [ -n "$DISPLAY" ]; then
      # X11
      feh --bg-fill "$CURRENT_WALLPAPER"
    else
      # Wayland
      swaybg -m fill -i "$CURRENT_WALLPAPER"
    fi

}}
map bg :setbg

# sets the current image file as wallpaper and re-generates the
# color theme with wal
cmd setbgwal ${{
    cp $f ~/Pictures/wallpaper.jpg
    wal -c
    wal -a 85 -i ~/Pictures/wallpaper.jpg

}}
map bw :setbgwal

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open ${{
    case $(file --mime-type $f -b) in
        text/*) $EDITOR $fx;;
        *) for f in $fx; do setsid $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

# use rifle to open
cmd rifle ${{
    set -f
    rifle -l $f
    read -p "Select runner: " runner
    rifle -p $runner $f
}}
map <enter> :rifle

# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

# make sure trash folder exists
# %mkdir -p ~/.trash

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
cmd trash %set -f; mv $fx ~/.trash

# define a custom 'delete' command
# cmd delete ${{
#     set -f
#     printf "$fx\n"
#     printf "delete?[y/n]"
#     read ans
#     [ $ans = "y" ] && rm -rf $fx
# }}

# use '<delete>' key for either 'trash' or 'delete' command
# map <delete> trash
map <delete> delete

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

# bulk rename command
cmd bulkrename ${{
	index=$(mktemp /tmp/lf-bulk-rename-index.XXXXXXXXXX)
	if [ -n "${fs}" ]; then
		echo "$fs" > $index
	else
		echo "$(ls "$(dirname $f)" | tr ' ' "\n")" > $index
	fi
	index_edit=$(mktemp /tmp/lf-bulk-rename.XXXXXXXXXX)
	cat $index > $index_edit
	$EDITOR $index_edit
	if [ $(cat $index | wc -l) -eq $(cat $index_edit | wc -l) ]; then
		max=$(($(cat $index | wc -l)+1))
		counter=1
		while [ $counter -le $max ]; do
			a="$(cat $index | sed "${counter}q;d")"
			b="$(cat $index_edit | sed "${counter}q;d")"
			counter=$(($counter+1))
			
			[ "$a" = "$b" ] && continue
			[ -e "$b" ] && echo "File exists: $b" && continue
			mv "$a" "$b"
		done
	else
		echo "Number of lines must stay the same"
	fi
	rm $index $index_edit
}}
map R bulkrename

# use q to exit to current directory
# use Q to return to original directory
push mw
map Q push 'w:quit<enter>
map q push :quit<enter>
